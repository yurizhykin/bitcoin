#!/usr/bin/env python3
# Copyright (c) 2020 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

import os

from test_framework.test_framework import BitcoinTestFramework
from test_framework.util import (
    assert_raises_rpc_error,
)

class WalletCrossChain(BitcoinTestFramework):
    def set_test_params(self):
        self.num_nodes = 3
        self.setup_clean_chain = True

    def skip_test_if_missing_module(self):
        self.skip_if_no_wallet()

    def setup_network(self, split=False):
        self.setup_nodes()
        self.connect_nodes(1, 2)

    def run_test(self):
        self.log.info("Generating initial blockchains")
        # Separate blockchain.
        self.nodes[0].generate(10)

        # Create wallet below allowed height difference (5 blocks).
        self.nodes[1].generate(5)
        within_path = os.path.join(self.nodes[1].datadir, 'within-wallet')
        self.nodes[1].createwallet(within_path)
        self.nodes[1].unloadwallet(within_path)

        # Create wallet at allowed height difference (6 blocks).
        self.nodes[1].generate(1)
        edge_path = os.path.join(self.nodes[1].datadir, 'edge-wallet')
        self.nodes[1].createwallet(edge_path)
        self.nodes[1].unloadwallet(edge_path)

        # Create wallet outside allowed height difference (7 blocks).
        self.nodes[1].generate(1)
        outside_path = os.path.join(self.nodes[1].datadir, 'outside-wallet')
        self.nodes[1].createwallet(outside_path)
        self.nodes[1].unloadwallet(outside_path)

        # Create wallet well outside allowed height difference (15 blocks).
        self.nodes[1].generate(8)
        well_outside_path = os.path.join(self.nodes[1].datadir, 'well-outside-wallet')
        self.nodes[1].createwallet(well_outside_path)
        self.nodes[1].unloadwallet(well_outside_path)

        self.log.info("Loading reorg wallet within allowed height difference")
        self.nodes[0].loadwallet(within_path)

        self.log.info("Loading reorg wallet exactly at allowed height difference")
        self.nodes[0].loadwallet(edge_path)

        self.log.info("Loading reorg wallet outside allowed height difference")
        assert_raises_rpc_error(-4, 'Wallet files should not be reused across chains.', self.nodes[0].loadwallet, outside_path)

        self.log.info("Loading reorg wallet well outside allowed height difference")
        assert_raises_rpc_error(-4, 'Wallet files should not be reused across chains.', self.nodes[0].loadwallet, well_outside_path)

        # Sync all nodes to the chain generated by the 0-th node.
        self.sync_blocks(self.nodes[1:3])

        # Create wallet below allowed height difference (5 blocks).
        self.nodes[2].generate(5)
        within_path = os.path.join(self.nodes[2].datadir, 'within-wallet')
        self.nodes[2].createwallet(within_path)
        self.nodes[2].unloadwallet(within_path)

        # Create wallet exactly at allowed height difference (6 blocks).
        self.nodes[2].generate(1)
        edge_path = os.path.join(self.nodes[2].datadir, 'edge-wallet')
        self.nodes[2].createwallet(edge_path)
        self.nodes[2].unloadwallet(edge_path)

        # Create wallet outside allowed height difference (7 blocks).
        self.nodes[2].generate(1)
        outside_path = os.path.join(self.nodes[2].datadir, 'outside-wallet')
        self.nodes[2].createwallet(outside_path)
        self.nodes[2].unloadwallet(outside_path)

        # Create wallet well outside allowed height difference (15 blocks).
        self.nodes[2].generate(8)
        well_outside_path = os.path.join(self.nodes[2].datadir, 'well-outside-wallet')
        self.nodes[2].createwallet(well_outside_path)
        self.nodes[2].unloadwallet(well_outside_path)

        self.log.info("Loading no-reorg wallet within allowed height difference")
        self.nodes[1].loadwallet(within_path)

        self.log.info("Loading no-reorg wallet exactly at allowed height difference")
        self.nodes[1].loadwallet(edge_path)

        self.log.info("Loading no-reorg wallet outside allowed height difference")
        self.nodes[1].loadwallet(outside_path)

        self.log.info("Loading no-reorg wallet well outside allowed height difference")
        self.nodes[1].loadwallet(well_outside_path)


if __name__ == '__main__':
    WalletCrossChain().main()
